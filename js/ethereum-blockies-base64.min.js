/*! ethereum-blockies-base64 ~0.1.0 | MIT */
(function() {
  "use strict";
  function _classCallCheck(a, b) { if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function"); }
  function createCanvas(width, height) {
    var c = typeof document !== "undefined" ? document.createElement("canvas") : null;
    if (c) {
      c.width = width;
      c.height = height;
    } 
    return c;
  }
  function toDataURL(canvas) {
    return canvas.toDataURL();
  }
  function randseed(seed) {
    var s = [0, 0, 0, 0];
    for (var i = 0; i < seed.length; i++) {
      s[i % 4] = (s[i % 4] << 5) - s[i % 4] + seed.charCodeAt(i);
    }
    return s;
  }
  function rand(s) {
    var t = s[0] ^ (s[0] << 11);
    s[0] = s[1];
    s[1] = s[2];
    s[2] = s[3];
    s[3] = s[3] ^ (s[3] >>> 19) ^ t ^ (t >>> 8);
    return (s[3] >>> 0) / 4294967296;
  }
  function createColor(s) {
    var h = Math.floor(rand(s) * 360);
    var s_ = (rand(s) * 60) + 40 + "%";
    var l = (rand(s) + rand(s) + rand(s) + rand(s)) * 25 + "%";
    return "hsl(" + h + "," + s_ + "," + l + ")";
  }
  function createImageData(size, randseed) {
    var width = size;
    var height = size;
    var dataWidth = Math.ceil(width / 2);
    var mirrorWidth = width - dataWidth;
    var data = new Array(width * height);
    for (var y = 0; y < height; y++) {
      for (var x = 0; x < dataWidth; x++) {
        var val = Math.floor(rand(randseed) * 2.3);
        data[y * width + x] = val;
        data[y * width + (width - 1 - x)] = val;
      }
    }
    return data;
  }
  function renderImage(data, size, scale) {
    var imgWidth = size;
    var imgHeight = size;
    var canvas = createCanvas(imgWidth * scale, imgHeight * scale);
    if (!canvas) return null;
    var ctx = canvas.getContext("2d");
    for (var y = 0; y < imgHeight; y++) {
      for (var x = 0; x < imgWidth; x++) {
        var v = data[y * imgWidth + x];
        ctx.fillStyle = this.palette[v];
        ctx.fillRect(x * scale, y * scale, scale, scale);
      }
    }
    return canvas;
  }
  function makeBlockie(address, opts) {
    opts = opts || {};
    var size = opts.size || 8;
    var scale = opts.scale || 4;
    var seed = address.toLowerCase();
    var seedData = randseed(seed);
    this.randseed = seedData;
    this.palette = [
      createColor(seedData),
      createColor(seedData),
      createColor(seedData)
    ];
    var data = createImageData(size, seedData);
    var canvas = renderImage.call(this, data, size, scale);
    return toDataURL(canvas);
  }
  if (typeof module !== "undefined" && module.exports) {
    module.exports = makeBlockie;
  } else if (typeof define === "function" && define.amd) {
    define(function() { return makeBlockie; });
  } else {
    window.makeBlockie = makeBlockie;
  }
})();